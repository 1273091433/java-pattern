package com.ikaimen.pattern.AdapterPattern;

/**
 * @Author: Mr.Chen
 * @Description: 适配器类
 * @Date: Created in 2017-09-03 下午2:57
 *
 * 适配器模式：
 *
 * 定义： 将一个类的接口变成客户端所期待的另一种接口，从而使原本因接口不匹配而无法工作在一起的两个类能够在一起工作
 *
 *
 *  适配器模式的优缺点：
 *
 *  优点：
 *
 *  适配器模式可以让两个没有任何关系的类在一起运行，只要适配器这个角色能够搞定他们就成。
 *
 *  增加了类的透明性
 *  想想看，我们访问的target 目标角色，但是具体的实现都委托给了源角色，而这些对高层次块石透明的，也是他不需要关心的。
 *
 *  提高了类的复用性
 *  当然了，源角色在原有的系统中还是可以正常使用，而在目标角色中也可以充当新的演员。
 *
 *  灵活性更好
 *  某一天，突然不想要适配器，没问题，删除掉这个适配器就可以了，其他的代码都不用修改，基本上就类似一个灵活的构建，想用就用，不想用就卸载。
 *
 *  适配器模式的使用场景：
 *
 *  适配器应用的场景只需要记住一点就足够了，你有动机修改一个已经投产的接口时，适配器模式可能是最适合你的模式。
 *
 *  注意事项：
 *
 *  适配器模式最好在详细设计阶段不要考虑他，他不是为了解决还处在开发阶段的问题，而是解决正在服役的项目问题，没有一个系统分析师会在做详细设计的时候考虑
 *
 *  使用适配器模式，这个模式使用的主要场景是在扩展应用中，就像我们的例子一样，系统扩展了，不符合原有设计的时候才考虑通过适配器模式减少代码修改带来的风险。
 *
 *  warn：项目一定要遵守依赖倒置原则和里氏替换原则，否则即使在适合使用适配器的场合下，也会带来非常大的改造。
 *
 *
 **/
public class Adapter extends Adapteree implements Target{

    @Override
    public void request() {
        super.doSomthing();
    }

}
