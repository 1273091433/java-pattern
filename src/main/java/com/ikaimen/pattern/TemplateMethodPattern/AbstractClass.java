package com.ikaimen.pattern.TemplateMethodPattern;

/**
 * Created by ChenTao on 2017/7/9.
 *
 * 抽象模板类
 *
 * 模板方法模式
 *
 * 模式定义：
 * 定义一个操作中的算法的框架，而降一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可以重定义该算法的某些特定步骤。
 * 模板方法模式的优缺点
 *
 * 优点：
 * 1，封装不变部分，扩展可变部分
 * 把认为是不变的算法封装到父类实现，而可变部分的则可以通过集成来继续扩展。在悍马模型例子中，是不是就分厂容易扩展？例如增加一个H3型号的悍马模型，很容易呀，增加一个子类，实现父类的基本方法就可以了。
 * 2，提取公共部分代码，便于维护
 * 我们例子中刚昂走过的弯路就是最好的证明，如果我们不抽象到父类中，任由这种散乱的戴拿发生，想想后果是什么样子？维护人员为了修正一个缺陷，需要导出查找类似的代码！
 * 3，行为由父类控制，子类实现
 * 基本方法是有子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。
 *
 * 缺点：
 * 按照我们的设计习惯，抽象类负责声明最抽象，最一般的事物属性和方法，实现类完成具体的事物属性和方法。但是模板方法模式却颠倒了，抽象类定义了部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，
 * 也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读困难，而且也会让新手感到不适应。
 *
 * 使用场景
 *
 * 1，多个子类有公共的方法，并且逻辑基本相同。
 * 2，重要，复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。
 * 3，重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。
 *
 */
public abstract class AbstractClass {

    //基本方法
    protected  abstract void doSomeThing();
    //基本方法
    protected  abstract  void doAnyThing();

    //模板方法

    public void  templateMethod(){

        /**
         * 调用基本方法，完成相关逻辑
         */

        this.doSomeThing();
        this.doAnyThing();

    }

}
