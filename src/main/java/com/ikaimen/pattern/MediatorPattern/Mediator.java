package com.ikaimen.pattern.MediatorPattern;

/**
 * Created by ChenTao on 2017/7/26.
 * 通用抽象中介者
 *
 * 中介者模式的定义：
 * 用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使其耦合松散，而且可以独立地改变他们之间的交互。
 *
 * 中介者模式的优缺点：
 *
 * 优点：
 * 中介者模式的优点就是减少类间的依赖，把原有的一对多的依赖变成一对一的依赖，同事类只依赖中介者，减少了依赖，当然同时也降低了类间的耦合，
 * 缺点：
 * 中介者模式的缺点及时中介者会膨胀的很大，而且逻辑混乱，原本N个对象直接的相互依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越混乱。
 *
 * 中介者模式的应用场景：
 *
 * 中介者模式简单，但是简单不代表容易使用，很容易被误用。在面向对象的编程中，对象和对象之间必然会有依赖关系，如果某个类和其他类没有任何相互依赖的关系，那这个类就是一个孤岛，
 * 在项目中就没有存在的必要了！就像是某个人如果永远独立生活，与任何人都没有关系，那这个人基本上就算是野人了---排除在人类这个定义之外。
 *
 * 类之间的依赖关系是必然存在的，一个类依赖多个类的情况也是存在的，存在即合理，那是否可以说只要有多个依赖关系就考虑使用中介者模式呢？答案是否定的。中介者模式未必能帮你把原本凌乱
 * 的逻辑整理的清清楚楚，而且中介者模式也是有缺点的，这个缺点在使用不当时会被放大，比如原本就简单的几个对象依赖关系，如果为了使用模式而加入了中介者，必然导致中介者的逻辑复杂化，
 * 因此中介者模式的使用需要量力而行！中介者模式适用于多个对象之间紧密耦合的情况，紧密耦合的标准是：在类图中出现了蜘蛛网状结构。在这种情况下一定要考虑使用中介者模式，这有利于把
 * 蜘蛛网梳理成星型结构，使原本复杂混乱的关系变成清晰简单。
 *
 * 实际应用：
 *
 * 1，机场调度中心
 *
 * 2，MVC框架
 *
 * 3，媒体网关
 *
 * 4，中介服务
 *
 * 最佳实践：
 *
 * 1，N个对象之间产生了相互依赖关系（N>2）
 *
 * 2,多个对象有依赖关系，但是依赖的行为尚不确定或者有发生改变的可能，在这种情况下一般建议采用中介者模式，降低变更引起的风险扩散。
 *
 * 3，产品开发。一个明显的例子就是MVC框架，把中介者模式应用到产品中，可以提升产品的性能额扩展性，但是对于项目开发就未必，因为项目是以交付投产为目标，而产品则是以稳定，高效。扩展为宗旨。
 *
 */
public abstract class Mediator {


    //定义同事类
    protected  ConcreteColleaguel1 c1;

    protected  ConcreteColleaguel2 c2;

    //通过getter/setter方法把同事类注入进来


    public ConcreteColleaguel1 getC1() {
        return c1;
    }

    public void setC1(ConcreteColleaguel1 c1) {
        this.c1 = c1;
    }

    public ConcreteColleaguel2 getC2() {
        return c2;
    }

    public void setC2(ConcreteColleaguel2 c2) {
        this.c2 = c2;
    }

    //中介者模式的业务逻辑

    public abstract void doSomthing1();

    public abstract void doSomthing2();
}
