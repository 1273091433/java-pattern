package com.ikaimen.pattern.StrategyPattern;

/**
 * @Author: Mr.Chen
 * @Description: 策略借口
 * @Date: Created in 2017-08-27 下午3:21
 *
 *
 * 策略模式的定义：
 *
 * 定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。
 *
 * 策略模式的优缺点
 *
 * 优点：
 *
 * 算法可以自由的切换
 *
 * 避免使用多重条件判断
 *
 * 扩展性良好
 *
 * 缺点：
 *
 * 策略数量增多
 *
 * 所有的策略类都需要对外暴露
 *
 * 策略模式的使用场景
 *
 * 多各类只有在算法或行为上稍有不同的场景。
 *
 * 算法需要自由切换的场景。
 * 例如，算法的选择是由使用者决定的，或者算法始终在进化，特别是一些站在技术前沿的行业，连业务专家都无法给你保证这样的系统规则能够存在多长时间，在这种情况下
 * 策略模式是你最好的助手。
 *
 * 需要屏蔽算法规则的场景
 *
 * 现在科技发展很快，人脑的记忆是有限的，太多的算法你只要知道一个额名字就可以了，传递相关的数字进来，反馈一个运算结果，万事大吉。
 *
 * 策略模式的注意事项
 *
 * 如果系统中的一个策略家族的具体策略数量超过4个，则需要考虑使用混合模式，解决策略类膨胀和对外暴露的问题，否则日后系统维护就会成为一个烫手山芋，谁都不想接。
 *
 *  最佳实践
 *
 *  策略模式是一个非常简单的模式。他在项目中使用得非常的多，但他单独使用的地方就比较少了，因为他有致命的缺陷；所有的策略都需要暴露出去，这样才方便客户端决定使用
 *  哪一个策略。例如，在离子中的赵云，赵云实际上不知道使用哪一个策略，他只知道拆第一个锦囊，而不知道是BackDoor这个妙计。是的诸葛亮已经在规定了在适当的场景下
 *  拆开制定的锦囊，我们的策略模式只是实现了精囊的管理，但是我们没哟严格的定义"适当的场景"拆开"适当的锦囊"，在实际项目中，我们一般通过工厂方法模式来实现策略
 *  类的声明，大家可以参考混编模式。
 **/
public interface Strategy {

    //策略模式的运算法则

    public void doSomthing();
}
