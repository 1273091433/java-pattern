package com.ikaimen.pattern.BuilderPattern;

/**
 * Created by ChenTao on 2017/7/12.
 * 抽象建造者类
 *
 * 建造者模式
 * 定义：
 * 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
 * 建造者模式的优缺点：
 * 使用建造者模式可以使客户端不必知道产品内部组成的细节，如例子中我们就不需要关心每一个具体的模型内部是如何实现的，产生的对象类型就是CarModle.
 * 建造者独立，容易扩展
 * 便于控制细节风险
 * 由于具体的建造者是独立的，因此可以对建造者过程逐步细化，而不对其他的模块产生任何影响。
 * 建造者模式的使用场景
 * 相同的方法，不同的执行顺序，产生不同的实践结果时，可以采用建造者模式。
 * 多个零件或者部件，都可以装配到一个对象中，但是产品的运行结果又不相同时，则可以试用该模式。
 * 产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适。
 * 在对象创建过程中会使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时，也可以采用建造者模式封装该对象的创建过程。该种场景只能是一个补偿方法，因为
 * 一个对象不容易获得，而在设计阶段竟然没有察觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标。
 * 注意事项
 * 建造者模式关注的是零件类型和装配工艺，这是他与工厂方法模式最大不同的地方，虽然同为创建类模式，但是注重点不同。
 *
 */
public abstract class Builder {

    //设置产品的不同部分，一伙的不同的产品
    public abstract  void setPart();

    //建造产品
    public abstract  Product buildProduct();

}
